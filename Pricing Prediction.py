# -*- coding: utf-8 -*-
"""ProjectPregrade.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ELcL9E2N2RN8P_z01aJOapJVK9TyGc5z
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

import warnings
warnings.filterwarnings('ignore')

data = pd.read_csv('USA_Housing.csv')
data.head()

data.info()

data.describe().transpose()

data['Income'] = data['Avg. Area Income']
data['House_age'] = data['Avg. Area House Age']
data['Rooms'] = data['Avg. Area Number of Rooms']
data['BedRooms'] = data['Avg. Area Number of Bedrooms']

data.Address

data['Address'].nunique

data.Address.value_counts()

data.nunique()

data.drop(columns = ['Avg. Area Income','Avg. Area House Age', 'Avg. Area Number of Rooms','Avg. Area Number of Bedrooms','Address'], axis = 1, inplace = True)

data.describe()

def defect(df):

 print(f'Description of feature: \n \n {df.describe()} \n')
 print(f'Value Counts: \n \n {df.value_counts()} \n')
 print(f'Unique Values: \n \n {df.unique()} \n')
 print(f'Missing Values: \n \n {df.isna().sum()} \n')
 print(f'Missing Values in %: \n \n {df.isna().mean()} \n')

for col in data:
 print("=========================================== {} ===========================================".format(col))
 print('')
 defect(data[col])
 print('\n \n')

X = data[['Area Population', 'Income', 'House_age', 'Rooms', 'BedRooms']]
X

y = data[['Price']]
y

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 2/3, random_state = 0)

X_train

y_train

X_test

y_test

lr = LinearRegression()
lr.fit(X_train, y_train)

y_train_pred = lr.predict(X_train)
y_train_pred

y_test_pred = lr.predict(X_test)
y_test_pred

def evauluate_trainData(actual, predicted):

 mse = mean_squared_error(actual, predicted)
 rmse = np.sqrt(mean_squared_error(actual, predicted))
 mae = mean_absolute_error(actual, predicted)
 r2 = r2_score(actual, predicted)

 print(f'MSE: {mse}')
 print(f'RMSE: {rmse}')
 print(f'MAE: {mae}')
 print(f'Training R2 Accuracy: {round(r2_score(actual, predicted), 4)*100} %')

evauluate_trainData(y_train, y_train_pred)

def evaluation_testData(actual, predicted):

 mse = mean_squared_error(actual, predicted)
 rmse = np.sqrt(mean_squared_error(actual, predicted))
 mae = mean_absolute_error(actual, predicted)
 r2 = r2_score(actual, predicted)

 print(f'MSE: {mse}')
 print(f'RMSE: {rmse}')
 print(f'MAE: {mae}')
 print(f'Testing R2 Accuracy: {round(r2_score(actual, predicted), 2)*100} %')

evaluation_testData(y_test, y_test_pred)

plt.scatter(y_train, y_train_pred, color= 'r')
plt.title('Scatter Plot for Training Data')
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.show()

plt.scatter(y_train, y_train_pred, color = 'r')
plt.plot([y_train.min(), y_train.max()], [y_train.min(), y_train.max()],  color='k', lw=2)
plt.title('Scatter Plot for Training Data')
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.show()

plt.scatter(y_test, y_test_pred, color = 'g')
plt.title('Scatter Plot for Testing Data')
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.show()

plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', color='k', lw=2)
plt.scatter(y_test, y_test_pred, color = 'g')
plt.title('Scatter Plot for Testing Data')
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.show()

#Polynomial Regression
from sklearn.preprocessing import PolynomialFeatures

ply = PolynomialFeatures(degree = 2)
ply

X_train_poly = ply.fit_transform(X_train)
X_test_poly = ply.transform(X_test)

X_train_poly

X_test_poly

poly_linear = LinearRegression()
poly_linear.fit(X_train_poly, y_train)

y_train_pred_poly = poly_linear.predict(X_train_poly)
y_test_pred_poly = poly_linear.predict(X_test_poly)

y_train

y_train_pred_poly

def evaluation_Ploy(actual, predicted):

 mse = mean_squared_error(actual, predicted)
 rmse = np.sqrt(mean_squared_error(actual, predicted))
 mae = mean_absolute_error(actual, predicted)
 r2 = r2_score(actual, predicted)

 print(f'MSE: {mse}')
 print(f'RMSE: {rmse}')
 print(f'MAE: {mae}')
 print(f'Training R2 Accuracy: {round(r2_score(actual, predicted), 4)*100} %')

evaluation_Ploy(y_train, y_train_pred_poly)

plt.scatter(y_train, y_train_pred_poly, label='Actual Price', color='b')
plt.plot([y_train.min(), y_train.max()], [y_train.min(), y_train.max()],  color='k', lw=2)
plt.title('Scatter Plot for Training Data')
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.grid()
plt.legend()
plt.show()

def tevauluate_polyTest(actual, predicted):

 mse = mean_squared_error(actual, predicted)
 rmse = np.sqrt(mean_squared_error(actual, predicted))
 mae = mean_absolute_error(actual, predicted)
 r2 = r2_score(actual, predicted)

 print(f'MSE: {mse}')
 print(f'RMSE: {rmse}')
 print(f'MAE: {mae}')
 print(f'Testing R2 Accuracy: {round(r2_score(actual, predicted), 2)*100} %')

tevauluate_polyTest(y_test, y_test_pred_poly)

plt.scatter(y_test, y_test_pred_poly, label='Actual Price', color='b')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='g', lw=2)
plt.title('Scatter Plot for Test Data')
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.grid()
plt.legend()
plt.show()

